name: Continuous Integration (CI)

run-name: ${{github.actor}} is testing out GitHub Actions.

# workflow to run when a push happens to the main/other branch, and also when a pull request is opened or changed.
on:
  push:
    branches:
      - features

#  CANCEL PREVIOUS RUNS : For CI runs that take a couple of minutes it might be a good idea to cancel previous CI runs. With GitHub actions we can configure this by using the "concurrency" option, and group the pipeline by "workflow" and "ref".
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

#  CI:false means we are setting the environment CI to false so that warnings can not be considered as error.
env:
  CI: false
  FORCE_COLOR: 1

jobs:
  build:
    runs-on: windows-latest

    #  RUNNING ON MULTIPLE ENVIRONMENTS link: strategy matrix syntax.
    #  specified the different versions as an array. This array is assigned to a custom variable, which is used in the workflow.
    #  All the steps in the job are run for every possible combination of the matrix. here we have given [14.x] so it will run 1 time,[12.x,14.x] then it will run 2 times
    #   one for 12.x and other for 14.x
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: First Step
        run: echo "Runned by ${{github.actor}}"

      - name: List Repository Files
        run: ls

      - name: Checkout to the repository
        uses: actions/checkout@v2
        with:
          ref: "${{ github.ref }}"

      - name: List Repository Files of master
        run: ls

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node-version }}

      # Keep in mind that actions/cache@v3 keep cache for each branch separately, and only main branch can share its cache between others. So for each new branch the first run won't hit cache.
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Package Dependencies
        # only run npm i if cache not found
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm install

      - name: Check code linting
        run: npm run lint
        continue-on-error: false
        # The continue-on-error attribute allows you to continue the workflow even if a step fails. This means that you can retry the failed step manually by running the workflow again.

      - name: Run test cases
        run: npm run test
        continue-on-error: false

      - name: check Code coverage
        run: npm test -- --coverage

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: ./coverage

      - name: Build Project
        run: npm run build

      - name: Upload artifact to enable deployment
        uses: actions/upload-artifact@v3
        with:
          name: production-files
          path: ./build

      # we upload the artifact to the runner using the command uses: actions/upload-artifact@v3
      # Finally, we specify the path to the build using path: ./dist ( dist is the default build output location for apps built with Vite)
      # - name: Build Project
      #   run: npm run build
      # - name: Upload artifact to enable deployment
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: production-files
      #     path: ./dist
